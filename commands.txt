1. git status

2. git log

3. git show 

4. git commit -am <>

5. git ls-files #shows tracking files

6. git checkout -- <>

7. git reset Head <> #staging area to working directory

8. git help log

9. git log --oneline --graph --decorate --all
# displays commit id along with message

10.  git config --global alias.hist "log --oneline --graph --decorate --all"
# user defined command
git hist
git hist -- <>

11.  git config --global --list

12.  git mv  <> <>

13.  git rm <>

14 . git add -A
# touch <>
# mv <> <>
# git add -A

15. git add -u

16. git diff <> HEAD 

17.git diff #git help diff

18.git branch

19.git checkout -b <>

20.git diff <branch_name> master

21. git checkout master 

22. git checkout <>

23.git merge <> #fast forward

24.git branch -d <> #delete branch

25. CONFLICT MERGE
git mergetool
!qa
git commit -m "k"

26.git tag <>

27. git tag --list

28. git tag -d <>

29.git tag -a <> -m ""
#annoations

30.git stash

31.git stash list

32.git stash pop

33. git reset <id> {--soft|--hard|--mixed{default}}
#used to change HEAD id
#hard ->staging area changes wiped out
#soft -> staging area persists
#mixed -> HEAD pointing to branch changes are placed in staging area

34.git reflog 
#shows all actions
#git reset --hard <id>
#moves HEAD to that id

35.git remote -v 
#shows existing repository

36. ssh-keygen -t rsa -b 2048 -C "#######@gmail.com" # cd ~/.ssh 

37. ssh -T git@github.com

38. git remote rm <>

39. git remote set-url origin <>

40. git clone <> <>

41. git version

42. git config --global push.default simple

43. git fetch
# it lets local git to retrieve latest metadata info 

44.git pull

45. git show <id>

46. git push -u origin <>

#markdowns
## ,> ,__<>__  ,:

47. git merge <>

48. git branch -a 

49. git branch -d <>

50. git fetch -p

51. git pull --all
(updates applied to corresponding branches)

52. git push origin :<branch_name> # delete branch

53. git pull --rebase

# places local commit higher than github commits made before rebase

54 . git config --global diff.tool p4merge
     git config --global difftool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
     git config --global diff.tool.prompt false
     repeat same for merge

55. git mergetool
    git commit -am "resolved conflict"

56. rm *.orig

57. git tag

58. git tag <> <branch_name>

59. git tag -a <name> -m "<>" <id>

60. git push origin <tag_name>

61. git push --tags

62. git push origin <branch_name>

63. git tag -d <tag_name>

64. git push origin :<tag_name>

65. git tag -f <tag_name> <id>

66. git push --force origin <branch_name>

67. git remote add upstream <ssh> 

68. git pull upstream master

69. git branch -d

70. git fetch -p

71. git fetch --upstream

72. git fetch --all

73. git checkout -b <branch_name> <origin/<branch_name>>
#when there are same branch in multiple origins

74. git format-patch <branch_name> -o patches

75. git format-patch -1 <branch_id> -o patches

76. git am <path>

77. git format-patch master --stdout < <file>

78. git format-patch -2 <commit_id> --stdout <name>

79. git commit --allow-empty

80 . git cherry-pick <id>

81. git cherry-pick <id> -n

82. git rebase -i <>

84. git archive < HEAD|-l | --format=zip --output <filename> HEAD>

85. git revert <id>

86. git revert <id> -n

87. git clean

88. git clean -n #list

89 .git clean -d #folders

90. git clean -d -f #files and folders
